# -*- coding: utf-8 -*-
# Copyright (c) 2014-2016, Niklas Hauser
# All rights reserved.

import logging

LOGGER = logging.getLogger("dfg.avr.mcu")

# Data is from avrdude v6.3
avrdude_mcu_map = \
{
    "at90s1200":        "1200",
    "at90s2313":        "2313",
    "at90s2333":        "2333",
    "at90s2343":        "2343",
    "at90s4414":        "4414",
    "at90s4433":        "4433",
    "at90s4434":        "4434",
    "at90s8515":        "8515",
    "at90s8535":        "8535",

    "at90can128":       "c128",
    "at90can32":        "c32",
    "at90can64":        "c64",
    "at90pwm216":       "pwm216",
    "at90pwm2":         "pwm2",
    "at90pwm2b":        "pwm2b",
    "at90pwm3":         "pwm3",
    "at90pwm316":       "pwm316",
    "at90pwm3b":        "pwm3b",
    "at90usb1286":      "usb1286",
    "at90usb1287":      "usb1287",
    "at90usb162":       "usb162",
    "at90usb646":       "usb646",
    "at90usb647":       "usb647",
    "at90usb82":        "usb82",

    "atmega103":        "m103",
    "atmega128":        "m128",
    "atmega1280":       "m1280",
    "atmega1281":       "m1281",
    "atmega1284":       "m1284",
    "atmega1284p":      "m1284p",
    "atmega1284rfr2":   "m1284rfr2",
    "atmega128rfa1":    "m128rfa1",
    "atmega128rfr2":    "m128rfr2",
    "atmega16":         "m16",
    "atmega161":        "m161",
    "atmega162":        "m162",
    "atmega163":        "m163",
    "atmega164p":       "m164p",
    "atmega168":        "m168",
    "atmega168p":       "m168p",
    "atmega168pb":      "m168pb",
    "atmega169":        "m169",
    "atmega16u2":       "m16u2",
    "atmega2560":       "m2560",
    "atmega2561":       "m2561",
    "atmega2564rfr2":   "m2564rfr2",
    "atmega256rfr2":    "m256rfr2",
    "atmega32":         "m32",
    "atmega324p":       "m324p",
    "atmega324pa":      "m324pa",
    "atmega325":        "m325",
    "atmega3250":       "m3250",
    "atmega328":        "m328",
    "atmega328p":       "m328p",
    "atmega329":        "m329",
    "atmega3290":       "m3290",
    "atmega3290p":      "m3290p",
    "atmega329p":       "m329p",
    "atmega32m1":       "m32m1",
    "atmega32u2":       "m32u2",
    "atmega32u4":       "m32u4",
    "atmega406":        "m406",
    "atmega48":         "m48",
    "atmega48p":        "m48p",
    "atmega48pb":       "m48pb",
    "atmega64":         "m64",
    "atmega640":        "m640",
    "atmega644":        "m644",
    "atmega644p":       "m644p",
    "atmega644rfr2":    "m644rfr2",
    "atmega645":        "m645",
    "atmega6450":       "m6450",
    "atmega649":        "m649",
    "atmega6490":       "m6490",
    "atmega64rfr2":     "m64rfr2",
    "atmega8":          "m8",
    "atmega8515":       "m8515",
    "atmega8535":       "m8535",
    "atmega88":         "m88",
    "atmega88p":        "m88p",
    "atmega88pb":       "m88pb",
    "atmega8u2":        "m8u2",

    "attiny10":         "t10",
    "attiny11":         "t11",
    "attiny12":         "t12",
    "attiny13":         "t13",
    "attiny15":         "t15",
    "attiny1634":       "t1634",
    "attiny20":         "t20",
    "attiny2313":       "t2313",
    "attiny24":         "t24",
    "attiny25":         "t25",
    "attiny26":         "t26",
    "attiny261":        "t261",
    "attiny28":         "t28",
    "attiny4":          "t4",
    "attiny40":         "t40",
    "attiny4313":       "t4313",
    "attiny43u":        "t43u",
    "attiny44":         "t44",
    "attiny45":         "t45",
    "attiny461":        "t461",
    "attiny5":          "t5",
    "attiny84":         "t84",
    "attiny85":         "t85",
    "attiny861":        "t861",
    "attiny88":         "t88",
    "attiny9":          "t9",

    "atxmega128a1":     "x128a1",
    "atxmega128a1revd": "x128a1d",
    "atxmega128a1u":    "x128a1u",
    "atxmega128a3":     "x128a3",
    "atxmega128a3u":    "x128a3u",
    "atxmega128a4":     "x128a4",
    "atxmega128a4u":    "x128a4u",
    "atxmega128b1":     "x128b1",
    "atxmega128b3":     "x128b3",
    "atxmega128c3":     "x128c3",
    "atxmega128d3":     "x128d3",
    "atxmega128d4":     "x128d4",
    "atxmega16a4":      "x16a4",
    "atxmega16a4u":     "x16a4u",
    "atxmega16c4":      "x16c4",
    "atxmega16d4":      "x16d4",
    "atxmega16e5":      "x16e5",
    "atxmega192a1":     "x192a1",
    "atxmega192a3":     "x192a3",
    "atxmega192a3u":    "x192a3u",
    "atxmega192c3":     "x192c3",
    "atxmega192d3":     "x192d3",
    "atxmega256a1":     "x256a1",
    "atxmega256a3":     "x256a3",
    "atxmega256a3b":    "x256a3b",
    "atxmega256a3bu":   "x256a3bu",
    "atxmega256a3u":    "x256a3u",
    "atxmega256c3":     "x256c3",
    "atxmega256d3":     "x256d3",
    "atxmega32a4":      "x32a4",
    "atxmega32a4u":     "x32a4u",
    "atxmega32c4":      "x32c4",
    "atxmega32d4":      "x32d4",
    "atxmega32e5":      "x32e5",
    "atxmega384c3":     "x384c3",
    "atxmega384d3":     "x384d3",
    "atxmega64a1":      "x64a1",
    "atxmega64a1u":     "x64a1u",
    "atxmega64a3":      "x64a3",
    "atxmega64a3u":     "x64a3u",
    "atxmega64a4":      "x64a4",
    "atxmega64a4u":     "x64a4u",
    "atxmega64b1":      "x64b1",
    "atxmega64b3":      "x64b3",
    "atxmega64c3":      "x64c3",
    "atxmega64d3":      "x64d3",
    "atxmega64d4":      "x64d4",
    "atxmega8e5":       "x8e5"
}

def getMcuForDevice(device_id):
    d = device_id.copy()
    # Search for key by truncating type
    while(True):
        LOGGER.debug("Searching for '%s'", d.string)
        if d.string in avrdude_mcu_map:
            return avrdude_mcu_map[d.string]
        if len(d.type) == 0: break;
        d.set("type", d.type[:-1])
    LOGGER.warning("Avrdude mcu not found for '%s'!", device_id.string)
    # otherwise return nothing
    return None
